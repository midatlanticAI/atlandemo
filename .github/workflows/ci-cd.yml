name: Wave Engine CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    name: Test Wave Engine
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov pytest-benchmark
      shell: bash
        
    - name: Set up Python environment paths (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "PYTHONPATH=${{ github.workspace }}:${{ github.workspace }}/src:${{ github.workspace }}/expert_modules" >> $GITHUB_ENV
      shell: bash
    
    - name: Set up Python environment paths (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "PYTHONPATH=${{ github.workspace }};${{ github.workspace }}/src;${{ github.workspace }}/expert_modules" >> $env:GITHUB_ENV
      shell: powershell
        
    - name: Debug Python environment
      run: |
        python -c "import sys; print('Python version:', sys.version); print('Python executable:', sys.executable)"
        python -c "import numpy; print('numpy version:', numpy.__version__)"
        python -c "import typing_extensions; print('typing_extensions imported successfully')"
        python -c "import sys; print('Python path:'); [print('  ' + p) for p in sys.path]"
      shell: bash
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  multi-language-test:
    name: Test Multi-Language Implementations
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
      
    - name: Test Python implementation
      working-directory: wave_engine_multi_lang/python
      run: python wave_engine.py
    
    - name: Test JavaScript implementation
      working-directory: wave_engine_multi_lang/javascript
      run: node wave_engine.js
    
    - name: Test Java implementation
      working-directory: wave_engine_multi_lang/java
      run: |
        javac WaveEngine.java
        java WaveEngine
    
    - name: Test Go implementation
      working-directory: wave_engine_multi_lang/go
      run: go run wave_engine.go
    
    - name: Test Rust implementation
      working-directory: wave_engine_multi_lang/rust
      run: cargo run

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest-benchmark
      shell: bash
    
    - name: Run LogicBench benchmark
      run: |
        python wave_logicbench_full_benchmark.py > benchmark_results.txt
      continue-on-error: true
    - name: Run LogicBench Sample benchmark
      run: |
        python wave_logicbench_wave_only.py > benchmark_results.txt
      continue-on-error: true
    - name: Run Ollama benchmark
      run: |
        python wave_vs_ollama_benchmark.py >> benchmark_results.txt
      continue-on-error: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results.txt

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json --exclude "./venv,./node_modules,./.git" || echo "Security scan completed with warnings"
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs: [test, multi-language-test]
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    
    - name: Build documentation
      run: |
        if [ -d "docs" ]; then
          mkdocs build --clean
        else
          mkdir -p site
          echo "<h1>Wave Engine Documentation</h1>" > site/index.html
          echo "<p>Documentation is under construction.</p>" >> site/index.html
        fi
      shell: bash
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './site'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [test, multi-language-test, benchmark]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        pip install build wheel setuptools
    
    - name: Build package
      run: |
        python -m build
    
    - name: Package built successfully
      run: |
        echo "üì¶ Wave Engine package built successfully!"
        echo "üåä Self-contained system - no external dependencies needed"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, multi-language-test, benchmark]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.test.result == 'success' && needs.multi-language-test.result == 'success'
      run: |
        echo "üéâ All tests passed! Wave Engine is ready for deployment."
    
    - name: Notify failure
      if: needs.test.result == 'failure' || needs.multi-language-test.result == 'failure'
      run: |
        echo "‚ùå Tests failed. Please check the logs."
        exit 1 